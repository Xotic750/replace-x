{"version":3,"sources":["../src/replace-x.js"],"names":[],"mappings":"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","file":"replace-x.esm.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport minimatch from 'minimatch';\nimport isRegex from 'is-regexp-x';\nimport xRegExp from 'xregexp';\nimport sharedOptionsFactory from '../bin/shared-options-x';\nimport 'colors';\n\nconst sharedOptions = sharedOptionsFactory();\n\nconst hasOwnProp = Function.call.bind(Object.prototype.hasOwnProperty);\n\nconst getFlags = function getFlags(options) {\n  let flags = 'g'; // global multiline\n\n  if (options.ignoreCase) {\n    flags += 'i';\n  }\n\n  if (options.multiline) {\n    flags += 'm';\n  }\n\n  if (options.unicode) {\n    flags += 'u';\n  }\n\n  if (options.dotAll) {\n    flags += 's';\n  }\n\n  if (options.sticky) {\n    flags += 'y';\n  }\n\n  return flags;\n};\n\nconst getRegExp = function getRegExp(options) {\n  if (isRegex(options.regex) || xRegExp.isRegExp(options.regex)) {\n    return options.regex;\n  }\n\n  return xRegExp(options.regex, getFlags(options));\n};\n\nconst getOptionList = function getOptionList(list, def) {\n  return list ? list.split(',') : def;\n};\n\nconst canSearch = function canSearch(file, isFile, options) {\n  const includes = getOptionList(options.include, null);\n  const ignoreFile = options.excludeList || path.join(__dirname, '/defaultignore');\n  const ignores = fs.readFileSync(ignoreFile, options.encoding).split('\\n');\n  const excludes = getOptionList(options.exclude, []).concat(ignores);\n  const inIncludes =\n    includes &&\n    includes.some(function iteratee(include) {\n      return minimatch(file, include, {dot: options.dot, matchBase: true});\n    });\n\n  const inExcludes = excludes.some(function iteratee(exclude) {\n    return minimatch(file, exclude, {dot: options.dot, matchBase: true});\n  });\n\n  return (!includes || !isFile || inIncludes) && !inExcludes;\n};\n\nconst makeReplaceText = function makeReplaceText(options, canReplace) {\n  let lineCount = 0;\n  // The posix standard specifies that conforming sed implementations shall\n  // support at least 8192 byte line lengths.\n  const limit = 400; // chars per line\n  const regex = getRegExp(options);\n  let replaceFunc;\n\n  if (typeof options.funcFile === 'string') {\n    // noinspection JSUnresolvedFunction\n    const funcString = fs.readFileSync(options.funcFile, options.encoding);\n    /* eslint-disable-next-line no-eval */\n    eval(`replaceFunc = ${funcString}`);\n  }\n\n  const print = function print(file, match) {\n    let printout = options.noColor ? file : file[options.fileColor] || file;\n\n    if (options.count) {\n      const count = ` (${match.length})`;\n      printout += options.noColor ? count : count.grey;\n    }\n\n    process.stdout.write(`${printout}\\n`);\n  };\n\n  const printer = function printer(line, index) {\n    if (line.match(regex)) {\n      lineCount += 1;\n\n      if (lineCount > options.maxLines) {\n        return true;\n      }\n\n      let replacement = String(options.replacement) || '$&';\n\n      if (!options.noColor) {\n        replacement = replacement[options.color];\n      }\n\n      const val = line.replace(regex, replaceFunc || replacement).slice(0, limit);\n      process.stdout.write(` ${index + 1}: ${val}\\n`);\n    }\n\n    return false;\n  };\n\n  return function replaceText(text, file) {\n    const match = text.match(regex);\n\n    if (!match) {\n      return null;\n    }\n\n    if (!options.silent) {\n      print(file, match);\n    }\n\n    if (!options.silent && !options.quiet && !(lineCount > options.maxLines) && options.multiline) {\n      text.split('\\n').some(printer);\n    }\n\n    return canReplace ? text.replace(regex, replaceFunc || String(options.replacement)) : undefined;\n  };\n};\n\nconst makeReplacefile = function makeReplacefile(options, canReplace, replacizeText) {\n  return function replaceFile(file) {\n    fs.lstat(file, function lstat(error, stats) {\n      if (error) {\n        throw error;\n      }\n\n      if (stats.isSymbolicLink()) {\n        // don't follow symbolic links for now\n        return;\n      }\n\n      const isFile = stats.isFile();\n\n      if (!canSearch(file, isFile, options)) {\n        return;\n      }\n\n      if (isFile) {\n        fs.readFile(file, options.encoding, function readFile(err, text) {\n          if (err) {\n            if (err.code === 'EMFILE') {\n              throw new Error('Too many files, try running `replace` without --async');\n            }\n\n            throw err;\n          }\n\n          const txt = replacizeText(text, file);\n\n          if (canReplace && txt !== null) {\n            fs.writeFile(file, txt, function writeFile(e) {\n              if (e) {\n                throw e;\n              }\n            });\n          }\n        });\n      } else if (stats.isDirectory() && options.recursive) {\n        fs.readdir(file, function cb(err, files) {\n          if (err) {\n            throw err;\n          }\n\n          files.forEach(function iteratee(f) {\n            replaceFile(path.join(file, f));\n          });\n        });\n      }\n    });\n  };\n};\n\nconst makeReplaceFileSync = function makeReplaceFileSync(options, canReplace, replaceText) {\n  return function replaceFileSync(file) {\n    const stats = fs.lstatSync(file);\n\n    if (stats.isSymbolicLink()) {\n      // don't follow symbolic links for now\n      return;\n    }\n\n    const isFile = stats.isFile();\n\n    if (!canSearch(file, isFile, options)) {\n      return;\n    }\n\n    if (isFile) {\n      if (canReplace) {\n        const text = replaceText(fs.readFileSync(file, options.encoding), file);\n\n        if (text !== null) {\n          fs.writeFileSync(file, text);\n        }\n      }\n    } else if (stats.isDirectory() && options.recursive) {\n      fs.readdirSync(file).forEach(function readdirSync(f) {\n        replaceFileSync(path.join(file, f));\n      });\n    }\n  };\n};\n\nconst replace = function replace(options) {\n  const opts = {...options};\n  const paths = Array.isArray(opts.paths) ? opts.paths : sharedOptions.paths.default;\n  opts.paths = paths.slice();\n\n  // If the path is the same as the default and the recursive option was not\n  // specified, search recursively under the current directory as a\n  // convenience.\n  const pathSame = opts.paths.length === 1 && opts.paths[0] === sharedOptions.paths.default[0];\n\n  if (pathSame && !hasOwnProp(opts, 'recursive')) {\n    opts.paths = ['.'];\n    opts.recursive = true;\n  }\n\n  opts.encoding = sharedOptions.encoding.choices.includes(opts.encoding) ? opts.encoding : 'utf-8';\n  opts.color = sharedOptions.color.choices.includes(opts.color) ? opts.color : 'cyan';\n  opts.fileColor = sharedOptions.fileColor.choices.includes(opts.fileColor) ? opts.fileColor : 'yellow';\n  const canReplace = !opts.preview && typeof opts.replacement !== 'undefined';\n  const replaceText = makeReplaceText(opts, canReplace);\n  const makeReplaceFn = opts.async ? makeReplacefile : makeReplaceFileSync;\n  const replaceFileFn = makeReplaceFn(opts, canReplace, replaceText);\n\n  opts.paths.forEach(replaceFileFn);\n};\n\nexport default replace;\n"]}